{"ast":null,"code":"var _jsxFileName = \"E:\\\\clarits1\\\\emedlogicsdemo\\\\src\\\\components\\\\Sectionnotes.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Sectionnotes = () => {\n  _s();\n  const [results, setResults] = useState(\"\");\n  useEffect(() => {\n    const fetchBooks = async () => {\n      try {\n        const response = await fetch(`/codes/${global.values.code}/details`);\n        if (response.ok) {\n          const data = await response.json();\n          setResults(data);\n        } else {\n          console.error(\"Failed to fetch data\");\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n    fetchBooks();\n  }, [global.values.code]);\n  console.log(\"our result is\", results);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: results && /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: results.sectionNotes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 17\n            }, this)\n          }, results.code, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(Sectionnotes, \"41e8t1OIw/StR2iF1Nlz/1vNUkE=\");\n_c = Sectionnotes;\nexport default Sectionnotes;\nvar _c;\n$RefreshReg$(_c, \"Sectionnotes\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Sectionnotes","_s","results","setResults","fetchBooks","response","fetch","global","values","code","ok","data","json","console","error","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","sectionNotes","_c","$RefreshReg$"],"sources":["E:/clarits1/emedlogicsdemo/src/components/Sectionnotes.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nconst Sectionnotes = () => {\r\n  const [results, setResults] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        const response = await fetch(`/codes/${global.values.code}/details`);\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setResults(data);\r\n        } else {\r\n          console.error(\"Failed to fetch data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [global.values.code]);\r\n\r\n\r\n\r\n  console.log(\"our result is\", results);\r\n  return (\r\n    <div className=\"section\">\r\n\r\n      <div >\r\n\r\n        <table>\r\n          <thead>\r\n            <tr></tr>\r\n          </thead>\r\n          <tbody>\r\n            {results && (\r\n              <tr key={results.code}>\r\n                <td>{results.sectionNotes}</td>\r\n\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sectionnotes"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,UAASC,MAAM,CAACC,MAAM,CAACC,IAAK,UAAS,CAAC;QACpE,IAAIJ,QAAQ,CAACK,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;UAClCT,UAAU,CAACQ,IAAI,CAAC;QAClB,CAAC,MAAM;UACLE,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;QACvC;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF,CAAC;IACDV,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACG,MAAM,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC;EAIxBI,OAAO,CAACE,GAAG,CAAC,eAAe,EAAEb,OAAO,CAAC;EACrC,oBACEH,OAAA;IAAKiB,SAAS,EAAC,SAAS;IAAAC,QAAA,eAEtBlB,OAAA;MAAAkB,QAAA,eAEElB,OAAA;QAAAkB,QAAA,gBACElB,OAAA;UAAAkB,QAAA,eACElB,OAAA;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eACRtB,OAAA;UAAAkB,QAAA,EACGf,OAAO,iBACNH,OAAA;YAAAkB,QAAA,eACElB,OAAA;cAAAkB,QAAA,EAAKf,OAAO,CAACoB;YAAY;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK;UAAC,GADxBnB,OAAO,CAACO,IAAI;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGjB;QACL;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAEV,CAAC;AAAApB,EAAA,CA7CKD,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AA+ClB,eAAeA,YAAY;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}