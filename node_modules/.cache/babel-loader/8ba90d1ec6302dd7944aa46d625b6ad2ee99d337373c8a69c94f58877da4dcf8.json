{"ast":null,"code":"var _jsxFileName = \"E:\\\\clarits1\\\\emedlogicsdemo\\\\src\\\\components\\\\Chapternotes.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../styles/Chapter.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chapternotes = () => {\n  _s();\n  const [results, setResults] = useState(\"\");\n  useEffect(() => {\n    const fetchBooks = async () => {\n      try {\n        const response = await fetch(`/codes/${global.values.code}/details`);\n        if (response.ok) {\n          const data = await response.json();\n          setResults(data);\n        } else {\n          console.error(\"Failed to fetch data\");\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n    fetchBooks();\n  }, [global.values.code]);\n  console.log(\"our result is\", results);\n  const shouldDisplayClassification = (classification, index) => {\n    if (index === 0) {\n      return true; // Always display the first classification\n    }\n\n    const previousClassifications = results.chapter.notes.slice(0, index).map(note => note.classification);\n    return !previousClassifications.includes(classification);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chapter\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [results && results.chapter.description && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: results.chapter.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this)\n        }, results.code, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), results && results.chapter.notes.sort((a, b) => a.classification.localeCompare(b.classification)).map((note, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [index === 0 || note.classification !== results.chapter.notes[index - 1].classification ? /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\" \", note.classification.toUpperCase()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 23\n            }, this) : null, index === 0 || note.classification !== results.chapter.notes[index - 1].classification ? /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \":\\xA0\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 23\n            }, this) : null, note.notes]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 19\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Chapternotes, \"41e8t1OIw/StR2iF1Nlz/1vNUkE=\");\n_c = Chapternotes;\nexport default Chapternotes;\nvar _c;\n$RefreshReg$(_c, \"Chapternotes\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Chapternotes","_s","results","setResults","fetchBooks","response","fetch","global","values","code","ok","data","json","console","error","log","shouldDisplayClassification","classification","index","previousClassifications","chapter","notes","slice","map","note","includes","className","children","description","fileName","_jsxFileName","lineNumber","columnNumber","sort","a","b","localeCompare","toUpperCase","_c","$RefreshReg$"],"sources":["E:/clarits1/emedlogicsdemo/src/components/Chapternotes.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../styles/Chapter.css\";\r\n\r\nconst Chapternotes = () => {\r\n  const [results, setResults] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        const response = await fetch(`/codes/${global.values.code}/details`);\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setResults(data);\r\n        } else {\r\n          console.error(\"Failed to fetch data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [global.values.code]);\r\n\r\n  console.log(\"our result is\", results);\r\n  const shouldDisplayClassification = (classification, index) => {\r\n    if (index === 0) {\r\n      return true; // Always display the first classification\r\n    }\r\n    const previousClassifications = results.chapter.notes\r\n      .slice(0, index)\r\n      .map((note) => note.classification);\r\n    return !previousClassifications.includes(classification);\r\n  };\r\n  return (\r\n    <div className=\"chapter\">\r\n      <div>\r\n        <div>\r\n          {results && results.chapter.description && (\r\n            <div key={results.code}>\r\n              <div>{results.chapter.description}</div>\r\n            </div>\r\n          )}\r\n          {results &&\r\n            results.chapter.notes\r\n              .sort((a, b) => a.classification.localeCompare(b.classification))\r\n              .map((note, index) => (\r\n                <div key={index}>\r\n                  <div>\r\n                    {index === 0 ||\r\n                    note.classification !==\r\n                      results.chapter.notes[index - 1].classification ? (\r\n                      <strong> {note.classification.toUpperCase()}</strong>\r\n                    ) : null}\r\n                    {index === 0 ||\r\n                    note.classification !==\r\n                      results.chapter.notes[index - 1].classification ? (\r\n                      <span>:&nbsp;&nbsp;</span>\r\n                    ) : null}\r\n                    {note.notes}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chapternotes;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}