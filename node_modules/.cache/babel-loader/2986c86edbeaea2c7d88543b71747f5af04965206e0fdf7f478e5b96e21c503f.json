{"ast":null,"code":"var _jsxFileName = \"E:\\\\clarits1\\\\emedlogicsdemo\\\\src\\\\components\\\\Year.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../styles/Year.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Year = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [first, setFirst] = useState(\"\");\n  const options = [{\n    value: \"option1\",\n    label: \"2024\"\n  }, {\n    value: \"option1\",\n    label: \"2023\"\n  }, {\n    value: \"option2\",\n    label: \"2022\"\n  }, {\n    value: \"option3\",\n    label: \"2021\"\n  }, {\n    value: \"option3\",\n    label: \"2020\"\n  }, {\n    value: \"option3\",\n    label: \"2019\"\n  }, {\n    value: \"option3\",\n    label: \"2018\"\n  }, {\n    value: \"option3\",\n    label: \"2017\"\n  }, {\n    value: \"option3\",\n    label: \"2016\"\n  }];\n  const toggleDropdown = () => setIsOpen(!isOpen);\n  const handleOptionClick = option => {\n    setSelectedOption(option);\n    setIsOpen(false);\n  };\n  global.years = selectedOption ? selectedOption.label : \"\"; // Check if selectedOption exists before accessing its label\n  console.log(global.years);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dropdown__toggle\",\n        onMouseEnter: () => setIsOpen(true),\n        onClick: toggleDropdown,\n        children: selectedOption && selectedOption.label ? selectedOption.label : \"Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"dropdown__menu\",\n        children: options.map(option => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"dropdown__menu-item\",\n          onClick: () => handleOptionClick(option),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: option.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dropdown__menu-item-description\",\n            children: option.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this)]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(Year, \"wZfCf1CvaQQFT3QIKL9hJR+PC6s=\");\n_c = Year;\nvar _c;\n$RefreshReg$(_c, \"Year\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Year","_s","isOpen","setIsOpen","selectedOption","setSelectedOption","first","setFirst","options","value","label","toggleDropdown","handleOptionClick","option","global","years","console","log","children","className","onMouseEnter","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","description","_c","$RefreshReg$"],"sources":["E:/clarits1/emedlogicsdemo/src/components/Year.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../styles/Year.css\";\r\n\r\nexport const Year = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [first, setFirst] = useState(\"\");\r\n\r\n  const options = [\r\n    { value: \"option1\", label: \"2024\" },\r\n    { value: \"option1\", label: \"2023\" },\r\n    { value: \"option2\", label: \"2022\" },\r\n    { value: \"option3\", label: \"2021\" },\r\n    { value: \"option3\", label: \"2020\" },\r\n    { value: \"option3\", label: \"2019\" },\r\n    { value: \"option3\", label: \"2018\" },\r\n    { value: \"option3\", label: \"2017\" },\r\n    { value: \"option3\", label: \"2016\" },\r\n  ];\r\n\r\n  const toggleDropdown = () => setIsOpen(!isOpen);\r\n\r\n  const handleOptionClick = (option) => {\r\n    setSelectedOption(option);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  global.years = selectedOption ? selectedOption.label : \"\"; // Check if selectedOption exists before accessing its label\r\n  console.log(global.years);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"dropdown\">\r\n        <button\r\n          className=\"dropdown__toggle\"\r\n          onMouseEnter={() => setIsOpen(true)}\r\n          onClick={toggleDropdown}\r\n        >\r\n          {selectedOption && selectedOption.label\r\n            ? selectedOption.label\r\n            : \"Year\"}\r\n        </button>\r\n        {isOpen && (\r\n          <ul className=\"dropdown__menu\">\r\n            {options.map((option) => (\r\n              <li\r\n                key={option.value}\r\n                className=\"dropdown__menu-item\"\r\n                onClick={() => handleOptionClick(option)}\r\n              >\r\n                <span>{option.label}</span>\r\n                <span className=\"dropdown__menu-item-description\">\r\n                  {option.description}\r\n                </span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}