{"ast":null,"code":"var _jsxFileName = \"E:\\\\clarits1\\\\emedlogicsdemo\\\\src\\\\components\\\\Codenotes.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Codenotes = () => {\n  _s();\n  const [results, setResults] = useState(null);\n  useEffect(() => {\n    const fetchBooks = async () => {\n      try {\n        if (global.values && global.values.code) {\n          const response = await fetch(`/codes/${global.values.code}/details/?version=${global.years}`);\n          if (response.ok) {\n            const data = await response.json();\n            setResults(data);\n          } else {\n            console.error(\"Failed to fetch data\");\n          }\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n    fetchBooks();\n  }, [global.values]);\n  console.log(\"our result is\", results);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codenotes\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: results && results.code && /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              children: results.longDescription\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 17\n            }, this)\n          }, results.code, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Codenotes, \"N7B/+eHsLT/dzJhUTI5eoU5ZVqM=\");\n_c = Codenotes;\nexport default Codenotes;\nvar _c;\n$RefreshReg$(_c, \"Codenotes\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Codenotes","_s","results","setResults","fetchBooks","global","values","code","response","fetch","years","ok","data","json","console","error","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","longDescription","_c","$RefreshReg$"],"sources":["E:/clarits1/emedlogicsdemo/src/components/Codenotes.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst Codenotes = () => {\r\n  const [results, setResults] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        if (global.values && global.values.code) {\r\n          const response = await fetch(\r\n            `/codes/${global.values.code}/details/?version=${global.years}`\r\n          );\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setResults(data);\r\n          } else {\r\n            console.error(\"Failed to fetch data\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n      }\r\n    };\r\n    fetchBooks();\r\n  }, [global.values]);\r\n\r\n  console.log(\"our result is\", results);\r\n\r\n  return (\r\n    <div className=\"codenotes\">\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr></tr>\r\n          </thead>\r\n          <tbody>\r\n            {results && results.code && (\r\n              <tr key={results.code}>\r\n                <td>{results.longDescription}</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Codenotes;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,IAAIC,MAAM,CAACC,MAAM,IAAID,MAAM,CAACC,MAAM,CAACC,IAAI,EAAE;UACvC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,UAASJ,MAAM,CAACC,MAAM,CAACC,IAAK,qBAAoBF,MAAM,CAACK,KAAM,EAChE,CAAC;UACD,IAAIF,QAAQ,CAACG,EAAE,EAAE;YACf,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;YAClCV,UAAU,CAACS,IAAI,CAAC;UAClB,CAAC,MAAM;YACLE,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;UACvC;QACF;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF,CAAC;IACDX,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC;EAEnBQ,OAAO,CAACE,GAAG,CAAC,eAAe,EAAEd,OAAO,CAAC;EAErC,oBACEH,OAAA;IAAKkB,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxBnB,OAAA;MAAAmB,QAAA,eACEnB,OAAA;QAAAmB,QAAA,gBACEnB,OAAA;UAAAmB,QAAA,eACEnB,OAAA;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eACRvB,OAAA;UAAAmB,QAAA,EACGhB,OAAO,IAAIA,OAAO,CAACK,IAAI,iBACtBR,OAAA;YAAAmB,QAAA,eACEnB,OAAA;cAAAmB,QAAA,EAAKhB,OAAO,CAACqB;YAAe;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK;UAAC,GAD3BpB,OAAO,CAACK,IAAI;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEjB;QACL;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACrB,EAAA,CA5CID,SAAS;AAAAwB,EAAA,GAATxB,SAAS;AA8Cf,eAAeA,SAAS;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}